# Image Transfer - As The Controller Device
#
# This script is meant to talk to the "image_transfer_jpg_streaming_as_the_remote_device_for_your_computer.py" on the OpenMV Cam.
#
# This script shows off how to transfer the frame buffer to your computer as a jpeg image.

import io, serial, serial.tools.list_ports, sys, time
from PIL import Image
import lib.rpc as rpc

# Fix Python 2.x.
try: input = raw_input
except NameError: pass

# The RPC library above is installed on your OpenMV Cam and provides mutliple classes for
# allowing your OpenMV Cam to control over USB or WIFI.

print("\nAvailable Ports:\n")
for port, desc, hwid in serial.tools.list_ports.comports():
    print("{} : {} [{}]".format(port, desc, hwid))
sys.stdout.write("\nPlease enter a port name: ")
sys.stdout.flush()
interface = rpc.rpc_usb_vcp_master(port=input())
print("")
sys.stdout.flush()

# First set the image variable to undefined since we haven't taken a picture yet
image = None

##############################################################
# Call Back Handlers
##############################################################

# This will be called with the bytes() object generated by the slave device.
def jpg_frame_buffer_cb(data):
    sys.stdout.flush()

    #print("recieved the image object")
    try:
        print("attempting to save the image...")
        image = Image.open(io.BytesIO(data))
        image = image.save("image.jpeg")
    except Exception as err:
        print(err)

print("calling the interface through rpc...")

# You may change the pixformat and the framesize of the image transfered from the remote device
# by modifying the below arguments.
result = interface.call("jpeg_image_stream", "sensor.RGB565,sensor.QVGA")

if result is not None:
    print("get ready...")
    # THE REMOTE DEVICE WILL START STREAMING ON SUCCESS. SO, WE NEED TO RECEIVE DATA IMMEDIATELY.
    interface.stream_reader(jpg_frame_buffer_cb, queue_depth=8)